package com.puritylake;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;


public class GenerateAST {
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output_directory>");
        }
        String outputDir = args[0];

        defineAst(outputDir, "Expr", Arrays.asList(
                "Assign     : Token name, Expr value",
                "Binary     : Expr left, Token operator, Expr right",
                "Call       : Expr callee, Token paren, List<Expr> arguments",
                "Grouping   : Expr expression",
                "Literal    : Object value",
                "Logical    : Expr left, Token operator, Expr right",
                "Unary      : Token operator, Expr right",
                "CommaGroup : Expr left, Expr right",
                "Ternary    : Expr cond, Expr trueVal, Expr falseVal",
                "Variable   : Token name"
        ));

        defineAst(outputDir, "Stmt", Arrays.asList(
                "Block      : List<Stmt> statements",
                "Expression : Expr expression",
                "Function   : Token name, List<Token> params, List<Stmt> body",
                "If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
                "Print      : Expr expression",
                "Return     : Token keyword, Expr value",
                "Var        : Token name, Expr initializer, boolean initialized",
                "While      : Expr condition, Stmt body",
                "For        : Stmt init, Expr cond, Expr post, Stmt body",
                "Break      : Token name : ControlFlowChange",
                "Continue   : Token name : ControlFlowChange"

        ));
    }

    private static void defineAst(
            String outputDir, String baseName, List<String> types)
            throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        PrintWriter writer = new PrintWriter(path, StandardCharsets.UTF_8);

        writer.println("// ###################################################");
        writer.println();
        writer.println("// DO NOT EDIT THIS FILE IT IS GENERATED AUTOMATICALLY");
        writer.println();
        writer.println("// ###################################################");
        writer.println();
        writer.println("package com.puritylake.lox.parsing;");
        writer.println();
        writer.println("import com.puritylake.lox.exceptions.*;");
        writer.println();
        writer.println("import java.util.List;");
        writer.println();
        writer.println("public abstract class " + baseName + " {");

        defineVisitor(writer, baseName, types);

        for (String type : types) {
            String[] split = type.split(":");
            String className = split[0].trim();
            String fields = split[1].trim();
            String exception = null;
            if (split.length == 3) {
                exception = split[2].trim();
            }
            defineType(writer, baseName, className, fields, exception);
        }

        writer.println();
        //writer.println("    public abstract <R> R accept(Visitor<R> visitor);");
        writer.println("    public abstract <R> R accept(Visitor<R> visitor) throws Exception;");

        writer.println("}");
        writer.close();
    }

    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
        writer.println("    public interface Visitor<R> {");

        for (String type : types) {
            String exception = null;
            String[] split = type.split(":");
            String typeName = split[0].trim();
            if (split.length == 3) {
                exception = split[2].trim();
            }

            if (exception != null) {
                writer.println("        R visit" + typeName + baseName + "(" +
                                        typeName + " " + baseName.toLowerCase() + ") throws " + exception + ";");
            } else {
                writer.println("        R visit" + typeName + baseName + "(" +
                        typeName + " " + baseName.toLowerCase() + ") throws Exception;");
            }
            writer.println(";");
        }

        writer.println("    }");
    }

    private static void defineType(
            PrintWriter writer, String baseName,
            String className, String fieldList,
            String exception) {
        writer.println("    public static class " + className + " extends " +
                baseName + " {");

        // constructor
        writer.println("       public " + className + "(" + fieldList + ") {");

        // Store parameters in fields
        String[] fields = fieldList.split(", ");
        for (String field : fields) {
            String name = field.split(" ")[1];
            writer.println("            this." + name + " = " + name + ";");
        }
        writer.println("        }");

        writer.println();
        writer.println("        @Override");
        if (exception != null) {
            writer.println("        public <R> R accept(Visitor<R> visitor) throws " + exception + " {");
        } else {
            writer.println("        public <R> R accept(Visitor<R> visitor) throws Exception {");
        }
        writer.println("            return visitor.visit" + className + baseName + "(this);");
        writer.println("        }");

        // Fields
        writer.println();
        for (String field : fields) {
            writer.println("        public final " + field + ";");
        }
        writer.println("    }");
    }
}

