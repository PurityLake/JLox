// ###################################################

// DO NOT EDIT THIS FILE IT IS GENERATED AUTOMATICALLY

// ###################################################

package com.puritylake.lox.parsing;

public abstract class Expr {
    public interface Visitor<R> {
        R visitBinaryExpr(Binary expr);
        R visitGroupingExpr(Grouping expr);
        R visitLiteralExpr(Literal expr);
        R visitUnaryExpr(Unary expr);
        R visitCommaGroupExpr(CommaGroup expr);
        R visitTernaryExpr(Ternary expr);
        R visitVariableExpr(Variable expr);
    }
    public static class Binary extends Expr {
       public Binary(Expr left, Token operator, Expr right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitBinaryExpr(this);
        }

        final Expr left;
        final Token operator;
        final Expr right;
    }
    public static class Grouping extends Expr {
       public Grouping(Expr expression) {
            this.expression = expression;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitGroupingExpr(this);
        }

        final Expr expression;
    }
    public static class Literal extends Expr {
       public Literal(Object value) {
            this.value = value;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitLiteralExpr(this);
        }

        final Object value;
    }
    public static class Unary extends Expr {
       public Unary(Token operator, Expr right) {
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitUnaryExpr(this);
        }

        final Token operator;
        final Expr right;
    }
    public static class CommaGroup extends Expr {
       public CommaGroup(Expr left, Expr right) {
            this.left = left;
            this.right = right;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitCommaGroupExpr(this);
        }

        final Expr left;
        final Expr right;
    }
    public static class Ternary extends Expr {
       public Ternary(Expr cond, Expr trueVal, Expr falseVal) {
            this.cond = cond;
            this.trueVal = trueVal;
            this.falseVal = falseVal;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitTernaryExpr(this);
        }

        final Expr cond;
        final Expr trueVal;
        final Expr falseVal;
    }
    public static class Variable extends Expr {
       public Variable(Token name) {
            this.name = name;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitVariableExpr(this);
        }

        final Token name;
    }

    public abstract <R> R accept(Visitor<R> visitor);
}
