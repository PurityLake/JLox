// ###################################################

// DO NOT EDIT THIS FILE IT IS GENERATED AUTOMATICALLY

// ###################################################

package com.puritylake.lox.parsing;

import java.util.List;

public abstract class Expr {
    public interface Visitor<R> {
        R visitAssignExpr(Assign expr) throws Exception;
        R visitBinaryExpr(Binary expr) throws Exception;
        R visitCallExpr(Call expr) throws Exception;
        R visitGetExpr(Get expr) throws Exception;
        R visitGroupingExpr(Grouping expr) throws Exception;
        R visitLiteralExpr(Literal expr) throws Exception;
        R visitLogicalExpr(Logical expr) throws Exception;
        R visitSetExpr(Set expr) throws Exception;
        R visitUnaryExpr(Unary expr) throws Exception;
        R visitCommaGroupExpr(CommaGroup expr) throws Exception;
        R visitTernaryExpr(Ternary expr) throws Exception;
        R visitVariableExpr(Variable expr) throws Exception;
        R visitAnonFunctionExpr(AnonFunction expr) throws Exception;
    }
    public static class Assign extends Expr {
       public Assign(Token name, Expr var, Expr value) {
            this.name = name;
            this.var = var;
            this.value = value;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitAssignExpr(this);
        }

        public final Token name;
        public final Expr var;
        public final Expr value;
    }
    public static class Binary extends Expr {
       public Binary(Expr left, Token operator, Expr right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitBinaryExpr(this);
        }

        public final Expr left;
        public final Token operator;
        public final Expr right;
    }
    public static class Call extends Expr {
       public Call(Expr callee, Token paren, List<Expr> arguments) {
            this.callee = callee;
            this.paren = paren;
            this.arguments = arguments;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitCallExpr(this);
        }

        public final Expr callee;
        public final Token paren;
        public final List<Expr> arguments;
    }
    public static class Get extends Expr {
       public Get(Expr object, Token name) {
            this.object = object;
            this.name = name;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitGetExpr(this);
        }

        public final Expr object;
        public final Token name;
    }
    public static class Grouping extends Expr {
       public Grouping(Expr expression) {
            this.expression = expression;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitGroupingExpr(this);
        }

        public final Expr expression;
    }
    public static class Literal extends Expr {
       public Literal(Object value) {
            this.value = value;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitLiteralExpr(this);
        }

        public final Object value;
    }
    public static class Logical extends Expr {
       public Logical(Expr left, Token operator, Expr right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitLogicalExpr(this);
        }

        public final Expr left;
        public final Token operator;
        public final Expr right;
    }
    public static class Set extends Expr {
       public Set(Expr object, Token name, Expr value) {
            this.object = object;
            this.name = name;
            this.value = value;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitSetExpr(this);
        }

        public final Expr object;
        public final Token name;
        public final Expr value;
    }
    public static class Unary extends Expr {
       public Unary(Token operator, Expr right) {
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitUnaryExpr(this);
        }

        public final Token operator;
        public final Expr right;
    }
    public static class CommaGroup extends Expr {
       public CommaGroup(Expr left, Expr right) {
            this.left = left;
            this.right = right;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitCommaGroupExpr(this);
        }

        public final Expr left;
        public final Expr right;
    }
    public static class Ternary extends Expr {
       public Ternary(Expr cond, Expr trueVal, Expr falseVal) {
            this.cond = cond;
            this.trueVal = trueVal;
            this.falseVal = falseVal;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitTernaryExpr(this);
        }

        public final Expr cond;
        public final Expr trueVal;
        public final Expr falseVal;
    }
    public static class Variable extends Expr {
       public Variable(Token name, int idx, int depth) {
            this.name = name;
            this.idx = idx;
            this.depth = depth;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitVariableExpr(this);
        }

        public final Token name;
        public int idx;
        public int depth;
    }
    public static class AnonFunction extends Expr {
       public AnonFunction(Stmt func) {
            this.func = func;
        }

        @Override
        public <R> R accept(Visitor<R> visitor) throws Exception {
            return visitor.visitAnonFunctionExpr(this);
        }

        public final Stmt func;
    }

    public abstract <R> R accept(Visitor<R> visitor) throws Exception;
}
